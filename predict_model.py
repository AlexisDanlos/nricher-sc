"""
Script de pr√©diction avec mod√®le pr√©-entra√Æn√©.
Utilise un mod√®le sauvegard√© pour faire des pr√©dictions sur des donn√©es.
"""

import pandas as pd
import numpy as np
from load_model import load_latest_model, predict_with_loaded_model
from data_processing import load_excel_data
from model_utils import print_progress
from sklearn.metrics import accuracy_score, classification_report
import os

# === CONFIGURATION ===
FILE_PATH = "20210614 Ecommerce sales.xlsb"
LIBELLE_COL = "LIBELLE"
NATURE_COL = "NATURE"

def main():
    """Fonction principale de pr√©diction."""
    
    # === 1. CHARGEMENT DU MOD√àLE ===
    print_progress(1, "Chargement du mod√®le")
    
    try:
        model_components = load_latest_model()
        if model_components is None:
            print("‚ùå Aucun mod√®le trouv√©. Veuillez d'abord entra√Æner un mod√®le.")
            return
        
        print("‚úÖ Mod√®le charg√© avec succ√®s")
        
    except Exception as e:
        print(f"‚ùå Erreur lors du chargement du mod√®le: {e}")
        return
    
    # === 2. CHARGEMENT DES DONN√âES ===
    print_progress(2, "Chargement des donn√©es")
    
    df = load_excel_data(FILE_PATH, LIBELLE_COL, NATURE_COL)
    
    # === 3. PR√âDICTIONS ===
    print_progress(3, "G√©n√©ration des pr√©dictions")
    
    # √âchantillonnage pour test (prendre les 1000 premiers pour exemple)
    df_sample = df.head(1000).copy()
    
    print(f"üìä Pr√©diction sur {len(df_sample)} √©chantillons...")
    
    try:
        predictions = predict_with_loaded_model(
            df_sample[LIBELLE_COL].tolist(),
            model_components
        )
        
        df_sample['nature_predite'] = predictions
        
        print("‚úÖ Pr√©dictions g√©n√©r√©es")
        
        # === 4. COMPARAISON AVEC LES VRAIES VALEURS ===
        if NATURE_COL in df_sample.columns:
            print_progress(4, "√âvaluation des pr√©dictions")
            
            # Calcul de la pr√©cision
            accuracy = accuracy_score(df_sample[NATURE_COL], df_sample['nature_predite'])
            print(f"üéØ Pr√©cision globale: {accuracy:.4f} ({accuracy*100:.2f}%)")
            
            # Analyse des erreurs
            errors = df_sample[df_sample[NATURE_COL] != df_sample['nature_predite']]
            print(f"‚ùå Erreurs: {len(errors)}/{len(df_sample)} ({len(errors)/len(df_sample)*100:.1f}%)")
            
            if len(errors) > 0:
                print("\nüîç Exemples d'erreurs:")
                for i, row in errors.head(5).iterrows():
                    print(f"   '{row[LIBELLE_COL][:50]}...'")
                    print(f"      Vraie: {row[NATURE_COL]}")
                    print(f"      Pr√©dite: {row['nature_predite']}")
                    print()
        
        # === 5. EXPORT DES R√âSULTATS ===
        print_progress(5, "Export des r√©sultats")
        
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"predictions_{timestamp}.xlsx"
        
        df_sample.to_excel(output_file, index=False)
        print(f"üìÅ Pr√©dictions sauvegard√©es: {output_file}")
        
    except Exception as e:
        print(f"‚ùå Erreur lors des pr√©dictions: {e}")
        return
    
    print("üéâ Pr√©dictions termin√©es avec succ√®s!")

def predict_single_text(text, model_components=None):
    """
    Pr√©dit la nature d'un texte unique.
    
    Args:
        text (str): Texte √† classifier
        model_components (dict, optional): Composants du mod√®le. Si None, charge automatiquement
        
    Returns:
        str: Nature pr√©dite
    """
    if model_components is None:
        model_components = load_latest_model()
        if model_components is None:
            return "Erreur: Aucun mod√®le disponible"
    
    try:
        predictions = predict_with_loaded_model([text], model_components)
        return predictions[0]
    except Exception as e:
        return f"Erreur: {e}"

def batch_predict_from_file(input_file, output_file=None, text_column="LIBELLE"):
    """
    Effectue des pr√©dictions en lot depuis un fichier.
    
    Args:
        input_file (str): Chemin vers le fichier d'entr√©e
        output_file (str, optional): Chemin vers le fichier de sortie
        text_column (str): Nom de la colonne contenant le texte
        
    Returns:
        pd.DataFrame: DataFrame avec les pr√©dictions
    """
    print(f"üìÅ Chargement depuis: {input_file}")
    
    # Chargement du fichier
    if input_file.endswith('.xlsx') or input_file.endswith('.xls'):
        df = pd.read_excel(input_file)
    elif input_file.endswith('.csv'):
        df = pd.read_csv(input_file)
    else:
        print("‚ùå Format de fichier non support√©")
        return None
    
    # Chargement du mod√®le
    model_components = load_latest_model()
    if model_components is None:
        print("‚ùå Aucun mod√®le trouv√©")
        return None
    
    # Pr√©dictions
    print(f"üîÆ Pr√©diction sur {len(df)} √©chantillons...")
    predictions = predict_with_loaded_model(df[text_column].tolist(), model_components)
    df['nature_predite'] = predictions
    
    # Sauvegarde
    if output_file is None:
        from datetime import datetime
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        output_file = f"batch_predictions_{timestamp}.xlsx"
    
    df.to_excel(output_file, index=False)
    print(f"‚úÖ Pr√©dictions sauvegard√©es: {output_file}")
    
    return df

if __name__ == "__main__":
    main()
